import hashlib
import time

class Block:
    def __init__(self, index, timestamp, data, previous_hash=''):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        to_hash = str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash) + str(self.nonce)
        return hashlib.sha256(to_hash.encode()).hexdigest()

    def __str__(self):
        return f"Index: {self.index}\nData: {self.data}\nHash: {self.hash}\nPrevHash: {self.previous_hash}\n"

# Create the blockchain with 3 linked blocks
blockchain = []
genesis_block = Block(0, time.time(), "Genesis Block")
blockchain.append(genesis_block)

for i in range(1, 3):
    new_block = Block(i, time.time(), f"Block {i} data", blockchain[i-1].hash)
    blockchain.append(new_block)

# Display the blockchain
for block in blockchain:
    print(block)

# Change data of Block 1 and observe the effect
blockchain[1].data = "Tampered Data"
blockchain[1].hash = blockchain[1].calculate_hash()

print("After tampering Block 1:")
for block in blockchain:
    print(block)
